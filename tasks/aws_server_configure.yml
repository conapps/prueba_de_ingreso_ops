# ---
# aws_server_configure.yml
# ---

- name: Change hostname
  hostname:
    name: "{{ec2_ubuntu_server_name}}"

- name: Change hosts file
  lineinfile:
    path: /etc/hosts
    regexp: "^127.0.0.1"
    line: "127.0.0.1  {{ ec2_ubuntu_server_name}}"

- name: Change hosts file
  lineinfile:
    path: /etc/hosts
    insertafter: "^127.0.0.1"
    line: "{{router_private_ip}}  {{ ec2_router_server_name}}"

- name: Fix locale issue
  blockinfile:
    path: /etc/environment
    insertafter: EOF
    content: |
      LC_ALL=en_US.UTF-8
      LANG=en_US.UTF-8

- name: Copiamos nuesto .vimrc customizado
  copy:
    src: ./files/.vimrc
    dest: "/home/ubuntu"
    mode: 0644
    owner: ubuntu
    group: ubuntu

- name: Add custom .bashrc
  blockinfile:
    path: /home/ubuntu/.bashrc
    insertafter: EOF
    content: |
      # Custom alias
      alias cls="clear"

      # Custom Prompt
      function prompt {
        local BLACK="\[\033[0;30m\]"
        local BLACKBOLD="\[\033[1;30m\]"
        local RED="\[\033[0;31m\]"
        local REDBOLD="\[\033[1;31m\]"
        local GREEN="\[\033[0;32m\]"
        local GREENBOLD="\[\033[1;32m\]"
        local YELLOW="\[\033[0;33m\]"
        local YELLOWBOLD="\[\033[1;33m\]"
        local BLUE="\[\033[0;34m\]"
        local BLUEBOLD="\[\033[1;34m\]"
        local PURPLE="\[\033[0;35m\]"
        local PURPLEBOLD="\[\033[1;35m\]"
        local CYAN="\[\033[0;36m\]"
        local CYANBOLD="\[\033[1;36m\]"
        local WHITE="\[\033[0;37m\]"
        local WHITEBOLD="\[\033[1;37m\]"
        local RESETCOLOR="\[\e[00m\]"

        export PS1="\n$RED\u$PURPLE@$(hostname) $GREEN\w $RESETCOLOR$GREENBOLD\$(git branch 2> /dev/null)\n $BLUE[\#] → $RESETCOLOR"
        export PS2=" | → $RESETCOLOR"
      }

      prompt

- name: Instalamos otros paquetes
  apt:
    name: "{{packages}}"
    state: present
  vars:
    packages:
      - python3-pip

- name: Instalamos paquetes con Pip
  pip:
    name: "{{item}}"
  loop:
    - docker-compose

- name: Agregamos el usuario $USER al grupo Docker para evitar tener que usar sudo con Docker
  shell: usermod -aG docker ubuntu
  become: yes

- name: Agregamos una ruta estatica entre el server y el router
  blockinfile:
    path: /etc/netplan/netplan_server_config.yaml
    insertafter: EOF
    content: "{{lookup('template', './files/netplan_server_config.j2')}}"
    create: yes
    owner: root

- name: Clonamos el repositorio con los contenedores de prueba
  git:
    repo: "{{project_repo}}"
    dest: /home/ubuntu/{{project_repo_name}}

- name: Agregamos una conexión con el vyos a través del contenedor lab
  blockinfile:
    path: /home/ubuntu/{{project_repo_name}}/docker-compose.yml
    insertafter: "        ipv4_address: 172.20.0.100"
    content: |2
          extra_hosts:
            - "vyos:{{router_private_ip}}"

- name: Instalamos las dependencias del contenedor de frontend y hacemos el build
  shell: "docker run --rm --name my-running-script -v /home/ubuntu/{{project_repo_name}}/frontend/frontend:/usr/src/app -w /usr/src/app node:stretch npm install"

- name: Instalamos las dependencias del contenedor de frontend y hacemos el build
  shell: "docker run --rm --name my-running-script -v /home/ubuntu/{{project_repo_name}}/frontend/frontend:/usr/src/app -w /usr/src/app node:stretch npm run build"

- name: Creamos e iniciamos el proyecto
  community.general.docker_compose:
    project_src:  /home/ubuntu/{{project_repo_name}}
    build: yes
  register: output
