# ---
# aws_server_configure.yml
#
# Tareas para configurar el servidor Ubuntu:
#   - Cambiamos el Hostname
#   - Corregir problema con LOCALE
#   - Agregar .bashrc customizado
#   - Instalar Docker
#   - Agregamos una ruta estatica entre el server y el router
# ---

- name: Change hostname
  hostname:
    name: '{{ ec2_ubuntu_server_name }}'

- name: Change hosts file
  lineinfile:
    path: /etc/hosts
    regexp: '^127.0.0.1'
    line: '127.0.0.1  {{ ec2_ubuntu_server_name}}'

- name: Fix locale issue
  blockinfile:
    path: /etc/environment
    insertafter: EOF
    content: |
      LC_ALL=en_US.UTF-8
      LANG=en_US.UTF-8

- name: Copiamos nuesto .vimrc customizado
  copy:
    src: ./files/.vimrc
    dest: '/home/ubuntu'
    mode: 0644
    owner: ubuntu
    group: ubuntu

- name: Add custom .bashrc
  blockinfile:
    path: /home/ubuntu/.bashrc
    insertafter: EOF
    content: |
      # Custom alias
      alias cls="clear"

      # Custom Prompt
      function prompt {
        local BLACK="\[\033[0;30m\]"
        local BLACKBOLD="\[\033[1;30m\]"
        local RED="\[\033[0;31m\]"
        local REDBOLD="\[\033[1;31m\]"
        local GREEN="\[\033[0;32m\]"
        local GREENBOLD="\[\033[1;32m\]"
        local YELLOW="\[\033[0;33m\]"
        local YELLOWBOLD="\[\033[1;33m\]"
        local BLUE="\[\033[0;34m\]"
        local BLUEBOLD="\[\033[1;34m\]"
        local PURPLE="\[\033[0;35m\]"
        local PURPLEBOLD="\[\033[1;35m\]"
        local CYAN="\[\033[0;36m\]"
        local CYANBOLD="\[\033[1;36m\]"
        local WHITE="\[\033[0;37m\]"
        local WHITEBOLD="\[\033[1;37m\]"
        local RESETCOLOR="\[\e[00m\]"

        export PS1="\n$RED\u$PURPLE@$(hostname) $GREEN\w $RESETCOLOR$GREENBOLD\$(git branch 2> /dev/null)\n $BLUE[\#] → $RESETCOLOR"
        export PS2=" | → $RESETCOLOR"
      }

      prompt

      function validate {
        python3 /home/ubuntu/.scripts/test.py
      }

- name: Instalamos Python 2.7
  apt:
    update_cache: true
    name: '{{ packages }}'
    state: present
  vars:
    packages:
      - python

- name: Configuramos Ansible para utilizar la version de Python 2.7
  set_fact:
    ansible_python_interpreter: /usr/bin/python

- name: Instalamos Pip2 y Git
  apt:
    name: '{{ packages }}'
    state: present
  vars:
    packages:
      - python
      - python-pip
      - git
      - bind9

- name: Instalamos paquetes con Pip
  pip:
    name: '{{item}}'
    executable: /usr/bin/pip
  loop:
    - docker-compose

- name: Agregamos el usuario $USER al grupo Docker para evitar tener que usar sudo con Docker
  shell: usermod -aG docker $USER
  become: yes

- name: Copiamos el archivo de configuración de Bind9
  blockinfile:
    path: /etc/bind/db.clientedemo.com.uy
    insertafter: EOF
    content: '{{lookup("template", "./files/db.clientedemo.com.uy.j2")}}'
    create: yes
    owner: ubuntu
    group: ubuntu
    mode: u=rw,g=r,o=r

- name: Crearmos la carpeta validadora
  file: 
    path: /home/ubuntu/.scripts
    state: directory

- name: Copiamos los scripts de prueba
  copy:
    src: ../files/scripts/
    dest: /home/ubuntu/.scripts/
    owner: ubuntu
    group: ubuntu
    mode: 0644

- name: Agregamos una ruta estatica entre el server y el router
  blockinfile:
    path: /etc/netplan/netplan_server_config.yaml
    insertafter: EOF
    content: '{{lookup("template", "./files/netplan_server_config.j2")}}'
    create: yes
    owner: root

- name: Reiniciamos el servidor
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  ignore_errors: true